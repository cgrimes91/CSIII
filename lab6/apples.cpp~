// sorting apples
// non STL-algorithm code to be replaced by algorthms
// Chris Grimes
//Lab 6 pt 2
// 10/5/2020


#include <iostream>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <deque>
#include <string>
#include <algorithm>
#include <functional>
#include <numeric>

using std::cin; using std::cout; using std::endl;
using std::string;
using std::vector; using std::deque;

const double minWeight=8.;
const double maxWeight=3.;

struct Apples{
  int index;
   double weight; // oz
   string color;  // red or green
   void print() const { cout << color << ", " <<  weight << endl; }
};

bool greenCheck(Apples);
bool redCheck(Apples);
Apples addWeight(Apples, Apples);
Apples makeApple();

int main(){
   srand(time(nullptr));

   cout << "Input crate size: ";
   int size;
   cin >> size;

   vector <Apples> crate(size);

   // assign random weight and color to apples in the crate
   // replace with generate()
   /*for(auto it = crate.begin(); it != crate.end(); ++it){
      it->weight = minWeight + 
	           static_cast<double>(rand())/RAND_MAX*(maxWeight - minWeight);
      it->color = rand() % 2 == 1 ? "green" : "red";
      }*/
   
   generate(crate.begin(), crate.end(), makeApple);

   int q=0;
   for(auto it=crate.begin(); it!=crate.end(); ++it){//adding an index element so the iterator can output aqn apples location
     it->index=q;
     ++q;
   }
 
   cout << "Enter weight to find: ";
   double toFind;
   cin >> toFind;

   // count_if()
   /*int cnt = 0;
   for(auto it = crate.cbegin(); it != crate.cend(); ++it) 
   if(it->weight > toFind) ++cnt;*/

   int cnt= count_if(crate.begin(), crate.end(), [toFind] (Apples a) {return a.weight>toFind;});
   
   cout << "There are " << cnt << " apples heavier than " 
	<< toFind << " oz" <<  endl;

   // find_if()
   cout << "at positions ";
   /*for(int i=0; i < size; ++i)
      if(crate[i].weight > toFind)
	 cout << i << ", ";
	 cout << endl;*/

   
   auto it=find_if(crate.begin(), crate.end(), [toFind] (Apples a) {return a.weight>toFind;});
   while(it!=crate.end()){
     cout<<it->index<<", ";
     it=find_if(++it, crate.end(), [toFind] (Apples a) {return a.weight>toFind;});
   }
   cout<<endl;

   // max_element()
   /*double heaviest = crate[0].weight;
   for(int i=1; i < size; ++i)
   if(crate[i].weight > heaviest) heaviest = crate[i].weight;*/
   
   cout << "Heaviest apple weighs: " << std::max_element(crate.begin(), crate.end(), [] (Apples a, Apples b) {return a.weight<b.weight;})->weight << " oz" << endl;

   

   // for_each() or accumulate()
   /*double sum = 0;
   for(int i=0; i < size; ++i)
   sum += crate[i].weight;*/
   
   cout << "Total apple weight is: " << std::accumulate(crate.begin(), crate.end(), 0,[] (double sum, Apples a){return sum+ a.weight;})  << " oz" << endl;


   // transform();
   cout << "How much should they grow: ";
   double toGrow;
   cin >> toGrow;
   
   vector<Apples> toAdd(size);
   for(int i=0; i <size ; ++i){
     toAdd[i].weight=toGrow;
   }
   
   /*for(int i=0; i < crate.size(); ++i)
     crate[i].weight += toGrow;*/

   std::transform(crate.begin(), crate.end(), toAdd.begin(), crate.begin(),addWeight);
   
   // remove_if()
   cout << "Input minimum acceptable weight: ";
   double minAccept;
   cin >> minAccept;
   
   /*for(auto it=crate.begin(); it != crate.end(); )
      if(it->weight < minAccept)
	 it = crate.erase(it);
      else
      ++it;*/

   crate.erase(std::remove_if(crate.begin(), crate.end(), [minAccept] (Apples a) {return a.weight<minAccept;}), crate.end());
   
   cout << "removed " << size - crate.size() << " elements" << endl;


   // bubble sort, replace with sort()
   /*bool swapped;
   do{
      swapped = false;
      for(int i=0; i < crate.size()-1; ++i)
	 if(crate[i].weight > crate[i+1].weight){
	    std::swap(crate[i], crate[i+1]);
	    swapped = true;
	 }
	 }while(swapped);*/

   std::sort(crate.begin(), crate.end(), [](Apples a, Apples b) {return a.weight<b.weight;});


   // moving all red apples from crate to peck
   // remove_copy_if() with back_inserter()/front_inserter() or equivalents
   deque<Apples> peck(size);
   
   /*for(auto it=crate.begin(); it != crate.end();)
      if(it->color == "red"){
	 peck.push_front(std::move(*it));
	 it=crate.erase(it);
      }else
      ++it;*/

   std::remove_copy_if(crate.begin(), crate.end(), peck.begin(),redCheck);
   crate.erase(std::remove_if(crate.begin(), crate.end(),greenCheck), crate.end());
   peck.erase(std::remove_if(peck.begin(), peck.end(), redCheck), peck.end());       

   // for_each() possibly
   cout << "apples in the create"<< endl;
   for(const auto &e: crate) {
      e.print(); 
   }

   cout << endl;

   // for_each() possibly
   cout << "apples in the peck"<< endl;
   for(const auto &e: peck) {
      e.print();
   }
}

bool redCheck(Apples a){
     return a.color!="red";
   }

bool greenCheck(Apples a){
     return a.color!="green";
   }

Apples addWeight(Apples lh, Apples rh){
  lh.weight+=rh.weight;
  return lh;
}

Apples makeApple(){
  Apples a;
  a.weight= minWeight + static_cast<double>(rand())/RAND_MAX*(maxWeight-minWeight);
  a.color= rand() % 2==1 ? "green": "red";
  return a;
}
